// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "../crates/prisma/src/prisma.rs"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db?socket_timeout=1&connection_limit=10"
  // for sqlite params, see https://prisma.github.io/quaint/quaint/connector/struct.SqliteParams.html
  // url      = env("LOCAL_DB_URL")
}

model FilePath {
  id            Int       @id @default(autoincrement())
  isDir         Boolean

  materializedPath String
  name          String

  assetObjectId Int?
  assetObject   AssetObject? @relation(fields: [assetObjectId], references: [id], onDelete: SetNull)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([materializedPath, name])
  @@index([materializedPath])
}

model AssetObject {
  id            Int       @id @default(autoincrement())

  note          String?
  hash          String    @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  mediaData     MediaData?

  filePaths     FilePath[]
  tasks         FileHandlerTask[]
}

model MediaData {
  id            Int @id @default(autoincrement())

  width         Int?
  height        Int?
  duration      Int?
  bitRate       Int?
  size          Int?
  mimeType      String?
  hasAudio      Boolean?

  description   String?

  assetObjectId Int       @unique
  assetObject   AssetObject? @relation(fields: [assetObjectId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FileHandlerTask {
  id            Int       @id @default(autoincrement())

  assetObjectId Int
  assetObject   AssetObject? @relation(fields: [assetObjectId], references: [id], onDelete: Cascade)

  taskType      String

  exitCode    Int?
  exitMessage String?

  startsAt      DateTime?
  endsAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([assetObjectId, taskType])
}

model VideoFrame {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  timestamp      Int

  caption VideoFrameCaption?

  videoClip   VideoClip? @relation(fields: [videoClipId], references: [id])
  videoClipId Int?

  @@unique([fileIdentifier, timestamp])
}

model VideoTranscript {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  startTimestamp Int
  endTimestamp   Int

  text String

  @@unique([fileIdentifier, startTimestamp, endTimestamp])
}

model VideoFrameCaption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caption String

  frame        VideoFrame @relation(fields: [videoFrameId], references: [id])
  videoFrameId Int        @unique
}

model VideoClip {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileIdentifier String
  startTimestamp Int
  endTimestamp   Int

  frames VideoFrame[]

  caption String?
}
